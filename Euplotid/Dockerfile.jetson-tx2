#Euplotid ARM image
# Start w/ nvidia provided l4t jetpack and install pytorch into it
FROM nvcr.io/nvidia/l4t-jetpack:r35.2.1

#Set up build environment
USER root
WORKDIR /root
ENV DEBIAN_FRONTEND=noninteractive
SHELL ["/bin/bash","-c"]
ENV BASH_EN=~/.bashrc
ENV SHELL=/bin/bash
ENV TZ="America/New_York"

#Get Euplotid and define variables
ENV EUPLO_IMAGE=armtid
ENV EUPLO_ARDUINO=false
ENV EUPLO_RPICAM=false
ENV JUPYTER_PORT=8894
ENV WEBCAM_PORT=8895
ENV EUPLO_DEPLOY=false

ENV APT_PACKAGES=" \
		psmisc \
		dialog \
		apache2-utils \
		gpac \
		zip \
		git \
		vim \
		tk-dev \
		wget \
		libxml2-dev \
		curl \
		libxslt1-dev \
		libzmq3-dev \
		gfortran \
		libjpeg-dev \
#		libgfortran3 \
#		build-essential \
#		liblapack-dev \
#		libopenblas-base \
#		openmpi-bin \
		"

RUN apt-get update && \
    apt-get install -y --no-install-recommends $APT_PACKAGES && \
    rm -rf "/var/lib/apt/lists/*" && \
    apt-get clean && \
    rm -rf /var/cache/apt && \
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
    echo $TZ > /etc/timezone
	
#Get conda dependencies 
COPY environment.yml /tmp/environment.yml

#Get micromamba and setup environment
ENV MAMBA_ROOT_PREFIX=/opt/conda
ENV PATH "$MAMBA_ROOT_PREFIX/bin:$PATH"
RUN cd /bin && \
    wget -qO- https://micromamba.snakepit.net/api/micromamba/linux-aarch64/latest | tar -xvj bin/micromamba --strip-components=1 && \
    chmod 755 /bin/micromamba && \
    mkdir -p $(dirname $MAMBA_ROOT_PREFIX) && \
    /bin/micromamba shell init -s bash && \
    echo "micromamba activate base" >> /root/.bashrc && \
    cp /root/.bashrc /tmp/.bashrc && \
    source ~/.bashrc && \
    /bin/micromamba install -y -n base -f /tmp/environment.yml && \
    ln -s /bin/micromamba /usr/bin/conda && \
    ln -s /bin/micromamba /opt/conda/bin/conda && \
    rm ${MAMBA_ROOT_PREFIX}/lib/*.a && \
    rm -rf ${MAMBA_ROOT_PREFIX}/pkgs && \
    /bin/micromamba clean --all --yes && \
	if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi

# Install Docker and docker-compose
#RUN  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
#		&& echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
#		$(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list \
#		&& apt-get update \
#		&& apt-get install -y docker-ce \
#        && curl -L "https://github.com/docker/compose/releases/download/v2.11.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose \
#	    && chmod +x /usr/local/bin/docker-compose

#Configure jupyter
ENV JUPYTER_PREFIX="/root/"
RUN jupyter lab --generate-config && \
    jupyter notebook --generate-config && \
    sed -i "/c.ServerApp.open_browser/c c.ServerApp.open_browser = False" "$JUPYTER_PREFIX".jupyter/jupyter_lab_config.py \
    && sed -i "/c.ServerApp.ip/c c.ServerApp.ip = '*'" "$JUPYTER_PREFIX".jupyter/jupyter_lab_config.py \
    && sed -i "/c.ServerApp.root_dir/c c.ServerApp.root_dir = '$WORK_DIR'" "$JUPYTER_PREFIX".jupyter/jupyter_lab_config.py \
    && sed -i "/c.ServerApp.token/c c.ServerApp.token = 'EuGrow'" "$JUPYTER_PREFIX".jupyter/jupyter_lab_config.py \
    && sed -i "/c.ServerApp.iopub_data_rate_limit/c c.ServerApp.iopub_data_rate_limit = 10000000" "$JUPYTER_PREFIX".jupyter/jupyter_lab_config.py \
    && sed -i "/c.ContentsManager.allow_hidden/c c.ContentsManager.allow_hidden = True" "$JUPYTER_PREFIX".jupyter/jupyter_notebook_config.py \
    && cp -R "$JUPYTER_PREFIX".jupyter /tmp \
    && chmod -R 777 /tmp/.jupyter

#Get startup things
COPY ./start.sh ./applotid.py /app/
RUN chmod 755 /app/start.sh

#Get repo to develop on project
#RUN cd /root && git clone -b master --single-branch https://github.com/dborgesr/EuGrow.git

# Set EuGrow as working directory
ARG WORKDIR="/data/eugrow"
RUN mkdir -p ${WORKDIR} && \
        chmod -R 0777 ${WORKDIR}
ENV PYTHONPATH "${WORKDIR}/EuGrow"
WORKDIR ${WORKDIR}

## Clean up
RUN apt-get -y autoremove && apt-get -y autoclean && \
	rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
	rm -rf /var/cache/apt

EXPOSE $JUPYTER_PORT
EXPOSE $WEBCAM_PORT
CMD ["bash", "/app/start.sh"]
