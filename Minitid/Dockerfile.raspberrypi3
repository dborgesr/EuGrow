#Minitid image for microscope, dashboard, and deploying feathers
FROM balenalib/%%BALENA_ARCH%%-debian:stretch-run
USER root
WORKDIR /root

#Get Euplotid and define variables
ENV EUPLO_IMAGE=minitid
ENV EUPLO_DEPLOY=false
ENV JUPYTER_PORT=8888
ENV EUPLO_ARDUINO=false
ENV EUPLO_RPICAM=false
ENV UDEV=1

ENV APT_PACKAGES=" \
		psmisc \
		dialog \
#		nginx \
#		php5-fpm \
#		php5-cli \
#		php5-common \
#		php-apc \
#		apache2-utils \
#		gpac \
#		motion \
		zip \
#		libav-tools \
#		gstreamer1.0-tools \
		git \
#		libraspberrypi-bin \
#		libraspberrypi-dev \
#		libraspberrypi-doc \
#		libraspberrypi0 \
		vim \
		tk-dev \
    	libpng-dev \
#		gfortran \
		wget \
		libncurses-dev \
		libxml2-dev \
		ca-certificates \
#		build-essential \
		libbz2-dev \
		libc6-dev \
		libgdbm-dev \
		libjpeg-dev \
#	liblapack-dev \
		libncurses-dev \
		libssl-dev \
		zlib1g-dev \
		curl \
		i2c-tools \
		liblzma-dev \
		xz-utils \
		dnsmasq \
		hostapd \
		iproute2 \
		iw \
		libdbus-1-dev \
		libexpat-dev \
		rfkill \
#		nodejs \
#		npm \
#		cron \
#        arduino \
#        g++ \
#        gcc \
#        usbutils \
#        make \
	sqlite \
	sqlite3 \
	libsqlite3-dev \
	libxslt-dev \
#	python3-lxml \
	libffi-dev \
	libffi6"

#Get needed debian packages and cleanup
#RUN apt-get -q update && \ 
#	apt-get dist-upgrade && \
#	apt-get install -yq --no-install-recommends $APT_PACKAGES && \
#	apt-get update && \
#	apt-get clean && \
#	rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*   
#Use balena's provided installing script
RUN install_packages $APT_PACKAGES


#Get conda dependencies 
COPY environment.yml /root/environment.yml
#Get berryconda and create environment
RUN curl --silent -s -L https://github.com/jjhelmus/berryconda/releases/download/v2.0.0/Berryconda3-2.0.0-Linux-armv6l.sh > miniconda.sh && \
    bash miniconda.sh -b -p /opt/conda && \
    rm miniconda.sh && \
    export PATH=/opt/conda/bin:$PATH  && \
#    conda update conda && \
#    conda update --all --yes && \
	conda env create -f /root/environment.yml && \
	conda clean -tipy && \
	if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi
ENV PATH=/opt/conda/envs/env/bin/:$PATH	

# Install packages for microscope camera -- Either UV4l or RPI Cam inteface based
# Install the UV4L PPA
#RUN curl -s http://www.linux-projects.org/listing/uv4l_repo/lpkey.asc | apt-key add - &&\
#  sed -i '1s;^;deb http://www.linux-projects.org/listing/uv4l_repo/raspbian/stretch stretch main\n;' /etc/apt/sources.list

# Install dependencies as well as the proper version of uv4l-webrtc
#RUN apt-get update -q &&\
#  apt-get install -yq \
#    uv4l \
#    uv4l-demos \
#    uv4l-dummy \
#    uv4l-mjpegstream \
#    uv4l-raspicam \
#    uv4l-raspicam-extras \
#    uv4l-raspidisp \
#    uv4l-server \
#    uv4l-uvc \
#    uv4l-xmpp-bridge \
#    uv4l-xscreen \
#    uv4l-webrtc$([ $(uname -m) = armv6l ] && echo -armv6) \
#    vlc \
#  && apt-get clean && rm -rf /var/lib/apt/lists/*

#Install RPI web cam interface, much more developed and feature rich than uv4l but slow
#RUN mkdir -p /usr/src/app && \
#	cd /usr/src/app && \
#	git clone https://github.com/silvanmelchior/RPi_Cam_Web_Interface.git && \
#	cd RPi_Cam_Web_Interface && \
#    chmod u+x *.sh && \
#    mkdir -p /run/shm/mjpeg && \
#    sed -i 's/sudo //g' install.sh && \
#    sed -i 's/sudo //g' start.sh && \
#    sed -i 's/sudo //g' stop.sh && \
#    sed -i 's/sudo //g' remove.sh && \
#    sed -i 's/sudo //g' update.sh && \
#    sed -i 's/sudo //g' RPi_Cam_Web_Interface_Installer.sh && \
#    sed -i 's/sudo shutdown -r now//g' www/macros/error_hard.sh && \
#    sed -i 's/80/8080/g' install.sh && \  
#    sed -i '/raspizip/d' install.sh && \
#    rm www/macros/error_hard.sh && \
#    mkdir -p /opt/vc/bin && \
#	cp bin/raspimjpeg /opt/vc/bin/ && \
#	chmod 755 /opt/vc/bin/raspimjpeg && \
#	echo /opt/vc/lib > /etc/ld.so.conf	 && \
#	if [ ! -e /usr/bin/raspimjpeg ]; then ln -s /opt/vc/bin/raspimjpeg /usr/bin/raspimjpeg; fi && \
#	ldconfig && \
#	wget https://raw.githubusercontent.com/droogmic/rpi-cam-web-docker/master/install/config.txt && \
#	sed -i "s/80/8080/g" config.txt && \
#	sed -i "s/nginx/apache/g" config.txt && \
#	sed -i "s/rpicamdir=\"\"/rpicamdir=\"microscope\"/g" config.txt && \
#	./install.sh q 

#set bash as default shell
ENV SHELL=/bin/bash
#Set bash up to start and activate env environment
RUN echo "source activate env" > ~/.bashrc
ENV PATH=/opt/conda/envs/env/bin:$PATH	

#Configure jupyter
RUN jupyter notebook --generate-config --allow-root && \
	sed -i "/c.NotebookApp.open_browser/c c.NotebookApp.open_browser = False" /root/.jupyter/jupyter_notebook_config.py \
        && sed -i "/c.NotebookApp.ip/c c.NotebookApp.ip = '*'" /root/.jupyter/jupyter_notebook_config.py \
        && sed -i "/c.NotebookApp.notebook_dir/c c.NotebookApp.notebook_dir = '/root/router'" /root/.jupyter/jupyter_notebook_config.py \
        && sed -i "/c.NotebookApp.token/c c.NotebookApp.token = 'euplotid'" /root/.jupyter/jupyter_notebook_config.py \
        && sed -i "/c.NotebookApp.iopub_data_rate_limit/c c.NotebookApp.iopub_data_rate_limit = 10000000" /root/.jupyter/jupyter_notebook_config.py 

# Install resin-wifi-connect
ENV DEVICE_TYPE=%%RESIN_MACHINE_NAME%%
RUN mkdir -p /usr/src/app && \
	cd /usr/src/app && \
	curl -Ls https://github.com/balena-io/wifi-connect/releases/download/v4.2.13/wifi-connect-v4.2.13-linux-armv7hf.tar.gz \
    | tar -xvz -C /usr/src/app/

#set correct timezone (EST)
RUN cp /usr/share/zoneinfo/America/New_York /etc/localtime

#Get needed code for spinup and dashboard
COPY ./start.sh ./applotid.py /app/
#RUN cd /root && git clone -b master --single-branch https://github.com/dborgesr/Euplotid.git

RUN mkdir /root/router
WORKDIR /root/router

EXPOSE 80
EXPOSE $JUPYTER_PORT
CMD ["bash", "/app/start.sh"]